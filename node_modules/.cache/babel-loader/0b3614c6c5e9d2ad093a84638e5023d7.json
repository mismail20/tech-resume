{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport _Set from './internal/_Set.js';\n/**\r\n * Finds the set (i.e. no duplicates) of all elements in the first list not\r\n * contained in the second list. Objects and Arrays are compared in terms of\r\n * value equality, not reference equality.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Relation\r\n * @sig [*] -> [*] -> [*]\r\n * @param {Array} list1 The first list.\r\n * @param {Array} list2 The second list.\r\n * @return {Array} The elements in `list1` that are not in `list2`.\r\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\r\n * @example\r\n *\r\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\r\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\r\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\r\n */\n\nvar difference = /*#__PURE__*/_curry2(function difference(first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  var secondLen = second.length;\n  var toFilterOut = new _Set();\n\n  for (var i = 0; i < secondLen; i += 1) {\n    toFilterOut.add(second[i]);\n  }\n\n  while (idx < firstLen) {\n    if (toFilterOut.add(first[idx])) {\n      out[out.length] = first[idx];\n    }\n\n    idx += 1;\n  }\n\n  return out;\n});\n\nexport default difference;","map":null,"metadata":{},"sourceType":"module"}