{"ast":null,"code":"import _arity from './internal/_arity.js';\nimport _curry1 from './internal/_curry1.js';\n/**\r\n * Accepts a function `fn` and returns a function that guards invocation of\r\n * `fn` such that `fn` can only ever be called once, no matter how many times\r\n * the returned function is invoked. The first value calculated is returned in\r\n * subsequent invocations.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig (a... -> b) -> (a... -> b)\r\n * @param {Function} fn The function to wrap in a call-only-once wrapper.\r\n * @return {Function} The wrapped function.\r\n * @example\r\n *\r\n *      const addOneOnce = R.once(x => x + 1);\r\n *      addOneOnce(10); //=> 11\r\n *      addOneOnce(addOneOnce(50)); //=> 11\r\n */\n\nvar once = /*#__PURE__*/_curry1(function once(fn) {\n  var called = false;\n  var result;\n  return _arity(fn.length, function () {\n    if (called) {\n      return result;\n    }\n\n    called = true;\n    result = fn.apply(this, arguments);\n    return result;\n  });\n});\n\nexport default once;","map":null,"metadata":{},"sourceType":"module"}