{"ast":null,"code":"import _curry3 from './internal/_curry3.js';\n/**\r\n * Takes a predicate, a transformation function, and an initial value,\r\n * and returns a value of the same type as the initial value.\r\n * It does so by applying the transformation until the predicate is satisfied,\r\n * at which point it returns the satisfactory value.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.20.0\r\n * @category Logic\r\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\r\n * @param {Function} pred A predicate function\r\n * @param {Function} fn The iterator function\r\n * @param {*} init Initial value\r\n * @return {*} Final value that satisfies predicate\r\n * @example\r\n *\r\n *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\r\n */\n\nvar until = /*#__PURE__*/_curry3(function until(pred, fn, init) {\n  var val = init;\n\n  while (!pred(val)) {\n    val = fn(val);\n  }\n\n  return val;\n});\n\nexport default until;","map":null,"metadata":{},"sourceType":"module"}