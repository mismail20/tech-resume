{"ast":null,"code":"import _curry1 from './internal/_curry1.js';\nimport _has from './internal/_has.js';\nimport keys from './keys.js';\n/**\r\n * Same as [`R.invertObj`](#invertObj), however this accounts for objects with\r\n * duplicate values by putting the values into an array.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.9.0\r\n * @category Object\r\n * @sig {s: x} -> {x: [ s, ... ]}\r\n * @param {Object} obj The object or array to invert\r\n * @return {Object} out A new object with keys in an array.\r\n * @see R.invertObj\r\n * @example\r\n *\r\n *      const raceResultsByFirstName = {\r\n *        first: 'alice',\r\n *        second: 'jake',\r\n *        third: 'alice',\r\n *      };\r\n *      R.invert(raceResultsByFirstName);\r\n *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\r\n */\n\nvar invert = /*#__PURE__*/_curry1(function invert(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    var val = obj[key];\n    var list = _has(val, out) ? out[val] : out[val] = [];\n    list[list.length] = key;\n    idx += 1;\n  }\n\n  return out;\n});\n\nexport default invert;","map":null,"metadata":{},"sourceType":"module"}