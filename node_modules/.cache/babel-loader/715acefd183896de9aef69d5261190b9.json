{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport ap from './ap.js';\nimport map from './map.js';\nimport prepend from './prepend.js';\nimport reduceRight from './reduceRight.js';\n/**\r\n * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\r\n * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\r\n * Applicative of Traversable.\r\n *\r\n * Dispatches to the `sequence` method of the second argument, if present.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category List\r\n * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\r\n * @param {Function} of\r\n * @param {*} traversable\r\n * @return {*}\r\n * @see R.traverse\r\n * @example\r\n *\r\n *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\r\n *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\r\n *\r\n *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\r\n *      R.sequence(R.of, Nothing());       //=> [Nothing()]\r\n */\n\nvar sequence = /*#__PURE__*/_curry2(function sequence(of, traversable) {\n  return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (x, acc) {\n    return ap(map(prepend, x), acc);\n  }, of([]), traversable);\n});\n\nexport default sequence;","map":null,"metadata":{},"sourceType":"module"}