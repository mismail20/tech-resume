{"ast":null,"code":"import _checkForMethod from './internal/_checkForMethod.js';\nimport _curry2 from './internal/_curry2.js';\nimport reduceBy from './reduceBy.js';\n/**\r\n * Splits a list into sub-lists stored in an object, based on the result of\r\n * calling a String-returning function on each element, and grouping the\r\n * results according to values returned.\r\n *\r\n * Dispatches to the `groupBy` method of the second argument, if present.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig (a -> String) -> [a] -> {String: [a]}\r\n * @param {Function} fn Function :: a -> String\r\n * @param {Array} list The array to group\r\n * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\r\n *         that produced that key when passed to `fn`.\r\n * @see R.reduceBy, R.transduce\r\n * @example\r\n *\r\n *      const byGrade = R.groupBy(function(student) {\r\n *        const score = student.score;\r\n *        return score < 65 ? 'F' :\r\n *               score < 70 ? 'D' :\r\n *               score < 80 ? 'C' :\r\n *               score < 90 ? 'B' : 'A';\r\n *      });\r\n *      const students = [{name: 'Abby', score: 84},\r\n *                      {name: 'Eddy', score: 58},\r\n *                      // ...\r\n *                      {name: 'Jack', score: 69}];\r\n *      byGrade(students);\r\n *      // {\r\n *      //   'A': [{name: 'Dianne', score: 99}],\r\n *      //   'B': [{name: 'Abby', score: 84}]\r\n *      //   // ...,\r\n *      //   'F': [{name: 'Eddy', score: 58}]\r\n *      // }\r\n */\n\nvar groupBy = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('groupBy', /*#__PURE__*/reduceBy(function (acc, item) {\n  if (acc == null) {\n    acc = [];\n  }\n\n  acc.push(item);\n  return acc;\n}, null)));\n\nexport default groupBy;","map":null,"metadata":{},"sourceType":"module"}