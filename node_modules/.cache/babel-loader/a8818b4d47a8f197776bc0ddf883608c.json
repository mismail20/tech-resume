{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xtakeWhile from './internal/_xtakeWhile.js';\nimport slice from './slice.js';\n/**\r\n * Returns a new list containing the first `n` elements of a given list,\r\n * passing each value to the supplied predicate function, and terminating when\r\n * the predicate function returns `false`. Excludes the element that caused the\r\n * predicate function to fail. The predicate function is passed one argument:\r\n * *(value)*.\r\n *\r\n * Dispatches to the `takeWhile` method of the second argument, if present.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> [a]\r\n * @sig (a -> Boolean) -> String -> String\r\n * @param {Function} fn The function called per iteration.\r\n * @param {Array} xs The collection to iterate over.\r\n * @return {Array} A new array.\r\n * @see R.dropWhile, R.transduce, R.addIndex\r\n * @example\r\n *\r\n *      const isNotFour = x => x !== 4;\r\n *\r\n *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\r\n *\r\n *      R.takeWhile(x => x !== 'd' , 'Ramda'); //=> 'Ram'\r\n */\n\nvar takeWhile = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['takeWhile'], _xtakeWhile, function takeWhile(fn, xs) {\n  var idx = 0;\n  var len = xs.length;\n\n  while (idx < len && fn(xs[idx])) {\n    idx += 1;\n  }\n\n  return slice(0, idx, xs);\n}));\n\nexport default takeWhile;","map":null,"metadata":{},"sourceType":"module"}