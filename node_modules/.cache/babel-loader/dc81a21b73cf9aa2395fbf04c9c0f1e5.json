{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _makeFlat from './internal/_makeFlat.js';\nimport _xchain from './internal/_xchain.js';\nimport map from './map.js';\n/**\r\n * `chain` maps a function over a list and concatenates the results. `chain`\r\n * is also known as `flatMap` in some libraries.\r\n *\r\n * Dispatches to the `chain` method of the second argument, if present,\r\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\r\n *\r\n * If second argument is a function, `chain(f, g)(x)` is equivalent to `f(g(x), x)`.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.3.0\r\n * @category List\r\n * @sig Chain m => (a -> m b) -> m a -> m b\r\n * @param {Function} fn The function to map with\r\n * @param {Array} list The list to map over\r\n * @return {Array} The result of flat-mapping `list` with `fn`\r\n * @example\r\n *\r\n *      const duplicate = n => [n, n];\r\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\r\n *\r\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\r\n */\n\nvar chain = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function (x) {\n      return fn(monad(x))(x);\n    };\n  }\n\n  return _makeFlat(false)(map(fn, monad));\n}));\n\nexport default chain;","map":null,"metadata":{},"sourceType":"module"}