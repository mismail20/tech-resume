{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\n/**\r\n * Creates a new object by recursively evolving a shallow copy of `object`,\r\n * according to the `transformation` functions. All non-primitive properties\r\n * are copied by reference.\r\n *\r\n * A `transformation` function will not be invoked if its corresponding key\r\n * does not exist in the evolved object.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.9.0\r\n * @category Object\r\n * @sig {k: (v -> v)} -> {k: v} -> {k: v}\r\n * @param {Object} transformations The object specifying transformation functions to apply\r\n *        to the object.\r\n * @param {Object} object The object to be transformed.\r\n * @return {Object} The transformed object.\r\n * @example\r\n *\r\n *      const tomato = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\r\n *      const transformations = {\r\n *        firstName: R.trim,\r\n *        lastName: R.trim, // Will not get invoked.\r\n *        data: {elapsed: R.add(1), remaining: R.add(-1)}\r\n *      };\r\n *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\r\n */\n\nvar evolve = /*#__PURE__*/_curry2(function evolve(transformations, object) {\n  var result = object instanceof Array ? [] : {};\n  var transformation, key, type;\n\n  for (key in object) {\n    transformation = transformations[key];\n    type = typeof transformation;\n    result[key] = type === 'function' ? transformation(object[key]) : transformation && type === 'object' ? evolve(transformation, object[key]) : object[key];\n  }\n\n  return result;\n});\n\nexport default evolve;","map":null,"metadata":{},"sourceType":"module"}