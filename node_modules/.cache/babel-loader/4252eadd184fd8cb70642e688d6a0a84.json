{"ast":null,"code":"import _includesWith from './internal/_includesWith.js';\nimport _curry3 from './internal/_curry3.js';\n/**\r\n * Finds the set (i.e. no duplicates) of all elements in the first list not\r\n * contained in the second list. Duplication is determined according to the\r\n * value returned by applying the supplied predicate to two list elements.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Relation\r\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\r\n * @param {Function} pred A predicate used to test whether two items are equal.\r\n * @param {Array} list1 The first list.\r\n * @param {Array} list2 The second list.\r\n * @return {Array} The elements in `list1` that are not in `list2`.\r\n * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\r\n * @example\r\n *\r\n *      const cmp = (x, y) => x.a === y.a;\r\n *      const l1 = [{a: 1}, {a: 2}, {a: 3}];\r\n *      const l2 = [{a: 3}, {a: 4}];\r\n *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\r\n */\n\nvar differenceWith = /*#__PURE__*/_curry3(function differenceWith(pred, first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n\n  while (idx < firstLen) {\n    if (!_includesWith(pred, first[idx], second) && !_includesWith(pred, first[idx], out)) {\n      out.push(first[idx]);\n    }\n\n    idx += 1;\n  }\n\n  return out;\n});\n\nexport default differenceWith;","map":null,"metadata":{},"sourceType":"module"}