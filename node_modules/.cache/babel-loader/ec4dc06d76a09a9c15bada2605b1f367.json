{"ast":null,"code":"import _curry3 from './internal/_curry3.js';\nimport mergeDeepWithKey from './mergeDeepWithKey.js';\n/**\r\n * Creates a new object with the own properties of the two provided objects.\r\n * If a key exists in both objects:\r\n * - and both associated values are also objects then the values will be\r\n *   recursively merged.\r\n * - otherwise the provided function is applied to associated values using the\r\n *   resulting value as the new value associated with the key.\r\n * If a key only exists in one object, the value will be associated with the key\r\n * of the resulting object.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.24.0\r\n * @category Object\r\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\r\n * @param {Function} fn\r\n * @param {Object} lObj\r\n * @param {Object} rObj\r\n * @return {Object}\r\n * @see R.mergeWith, R.mergeDeepWithKey\r\n * @example\r\n *\r\n *      R.mergeDeepWith(R.concat,\r\n *                      { a: true, c: { values: [10, 20] }},\r\n *                      { b: true, c: { values: [15, 35] }});\r\n *      //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}\r\n */\n\nvar mergeDeepWith = /*#__PURE__*/_curry3(function mergeDeepWith(fn, lObj, rObj) {\n  return mergeDeepWithKey(function (k, lVal, rVal) {\n    return fn(lVal, rVal);\n  }, lObj, rObj);\n});\n\nexport default mergeDeepWith;","map":null,"metadata":{},"sourceType":"module"}