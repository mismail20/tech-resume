{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\n/**\r\n * Wraps a function of any arity (including nullary) in a function that accepts\r\n * exactly `n` parameters. Any extraneous parameters will not be passed to the\r\n * supplied function.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig Number -> (* -> a) -> (* -> a)\r\n * @param {Number} n The desired arity of the new function.\r\n * @param {Function} fn The function to wrap.\r\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\r\n *         arity `n`.\r\n * @see R.binary, R.unary\r\n * @example\r\n *\r\n *      const takesTwoArgs = (a, b) => [a, b];\r\n *\r\n *      takesTwoArgs.length; //=> 2\r\n *      takesTwoArgs(1, 2); //=> [1, 2]\r\n *\r\n *      const takesOneArg = R.nAry(1, takesTwoArgs);\r\n *      takesOneArg.length; //=> 1\r\n *      // Only `n` arguments are passed to the wrapped function\r\n *      takesOneArg(1, 2); //=> [1, undefined]\r\n * @symb R.nAry(0, f)(a, b) = f()\r\n * @symb R.nAry(1, f)(a, b) = f(a)\r\n * @symb R.nAry(2, f)(a, b) = f(a, b)\r\n */\n\nvar nAry = /*#__PURE__*/_curry2(function nAry(n, fn) {\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.call(this);\n      };\n\n    case 1:\n      return function (a0) {\n        return fn.call(this, a0);\n      };\n\n    case 2:\n      return function (a0, a1) {\n        return fn.call(this, a0, a1);\n      };\n\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.call(this, a0, a1, a2);\n      };\n\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.call(this, a0, a1, a2, a3);\n      };\n\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.call(this, a0, a1, a2, a3, a4);\n      };\n\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5);\n      };\n\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6);\n      };\n\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);\n      };\n\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);\n      };\n\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\n      };\n\n    default:\n      throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n  }\n});\n\nexport default nAry;","map":null,"metadata":{},"sourceType":"module"}