{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport _isInteger from './internal/_isInteger.js';\n/**\r\n * `mathMod` behaves like the modulo operator should mathematically, unlike the\r\n * `%` operator (and by extension, [`R.modulo`](#modulo)). So while\r\n * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer\r\n * arguments, and returns NaN when the modulus is zero or negative.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.3.0\r\n * @category Math\r\n * @sig Number -> Number -> Number\r\n * @param {Number} m The dividend.\r\n * @param {Number} p the modulus.\r\n * @return {Number} The result of `b mod a`.\r\n * @see R.modulo\r\n * @example\r\n *\r\n *      R.mathMod(-17, 5);  //=> 3\r\n *      R.mathMod(17, 5);   //=> 2\r\n *      R.mathMod(17, -5);  //=> NaN\r\n *      R.mathMod(17, 0);   //=> NaN\r\n *      R.mathMod(17.2, 5); //=> NaN\r\n *      R.mathMod(17, 5.3); //=> NaN\r\n *\r\n *      const clock = R.mathMod(R.__, 12);\r\n *      clock(15); //=> 3\r\n *      clock(24); //=> 0\r\n *\r\n *      const seventeenMod = R.mathMod(17);\r\n *      seventeenMod(3);  //=> 2\r\n *      seventeenMod(4);  //=> 1\r\n *      seventeenMod(10); //=> 7\r\n */\n\nvar mathMod = /*#__PURE__*/_curry2(function mathMod(m, p) {\n  if (!_isInteger(m)) {\n    return NaN;\n  }\n\n  if (!_isInteger(p) || p < 1) {\n    return NaN;\n  }\n\n  return (m % p + p) % p;\n});\n\nexport default mathMod;","map":null,"metadata":{},"sourceType":"module"}