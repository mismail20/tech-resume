{"ast":null,"code":"import _curry1 from './internal/_curry1.js';\nimport nAry from './nAry.js';\n/**\r\n * Wraps a function of any arity (including nullary) in a function that accepts\r\n * exactly 1 parameter. Any extraneous parameters will not be passed to the\r\n * supplied function.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.2.0\r\n * @category Function\r\n * @sig (* -> b) -> (a -> b)\r\n * @param {Function} fn The function to wrap.\r\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\r\n *         arity 1.\r\n * @see R.binary, R.nAry\r\n * @example\r\n *\r\n *      const takesTwoArgs = function(a, b) {\r\n *        return [a, b];\r\n *      };\r\n *      takesTwoArgs.length; //=> 2\r\n *      takesTwoArgs(1, 2); //=> [1, 2]\r\n *\r\n *      const takesOneArg = R.unary(takesTwoArgs);\r\n *      takesOneArg.length; //=> 1\r\n *      // Only 1 argument is passed to the wrapped function\r\n *      takesOneArg(1, 2); //=> [1, undefined]\r\n * @symb R.unary(f)(a, b, c) = f(a)\r\n */\n\nvar unary = /*#__PURE__*/_curry1(function unary(fn) {\n  return nAry(1, fn);\n});\n\nexport default unary;","map":null,"metadata":{},"sourceType":"module"}