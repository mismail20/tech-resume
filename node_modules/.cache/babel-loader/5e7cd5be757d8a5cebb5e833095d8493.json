{"ast":null,"code":"import _curry3 from './internal/_curry3.js';\nimport _reduce from './internal/_reduce.js';\n/**\r\n * Returns a single item by iterating through the list, successively calling\r\n * the iterator function and passing it an accumulator value and the current\r\n * value from the array, and then passing the result to the next call.\r\n *\r\n * The iterator function receives two values: *(acc, value)*. It may use\r\n * [`R.reduced`](#reduced) to shortcut the iteration.\r\n *\r\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\r\n * is *(value, acc)*.\r\n *\r\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\r\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\r\n * on this behavior, see:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\r\n *\r\n * Dispatches to the `reduce` method of the third argument, if present. When\r\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\r\n * shortcuting, as this is not implemented by `reduce`.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig ((a, b) -> a) -> a -> [b] -> a\r\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\r\n *        current element from the array.\r\n * @param {*} acc The accumulator value.\r\n * @param {Array} list The list to iterate over.\r\n * @return {*} The final, accumulated value.\r\n * @see R.reduced, R.addIndex, R.reduceRight\r\n * @example\r\n *\r\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\r\n *      //          -               -10\r\n *      //         / \\              / \\\r\n *      //        -   4           -6   4\r\n *      //       / \\              / \\\r\n *      //      -   3   ==>     -3   3\r\n *      //     / \\              / \\\r\n *      //    -   2           -1   2\r\n *      //   / \\              / \\\r\n *      //  0   1            0   1\r\n *\r\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\r\n */\n\nvar reduce = /*#__PURE__*/_curry3(_reduce);\n\nexport default reduce;","map":null,"metadata":{},"sourceType":"module"}