{"ast":null,"code":"import pipe from './pipe.js';\nimport reverse from './reverse.js';\n/**\r\n * Performs right-to-left function composition. The rightmost function may have\r\n * any arity; the remaining functions must be unary.\r\n *\r\n * **Note:** The result of compose is not automatically curried.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\r\n * @param {...Function} ...functions The functions to compose\r\n * @return {Function}\r\n * @see R.pipe\r\n * @example\r\n *\r\n *      const classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\r\n *      const yellGreeting = R.compose(R.toUpper, classyGreeting);\r\n *      yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\r\n *\r\n *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\r\n *\r\n * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\r\n */\n\nexport default function compose() {\n  if (arguments.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n\n  return pipe.apply(this, reverse(arguments));\n}","map":null,"metadata":{},"sourceType":"module"}