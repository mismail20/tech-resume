{"ast":null,"code":"import _curry1 from './internal/_curry1.js';\nimport apply from './apply.js';\nimport curryN from './curryN.js';\nimport max from './max.js';\nimport pluck from './pluck.js';\nimport reduce from './reduce.js';\nimport keys from './keys.js';\nimport values from './values.js'; // Use custom mapValues function to avoid issues with specs that include a \"map\" key and R.map\n// delegating calls to .map\n\nfunction mapValues(fn, obj) {\n  return keys(obj).reduce(function (acc, key) {\n    acc[key] = fn(obj[key]);\n    return acc;\n  }, {});\n}\n/**\r\n * Given a spec object recursively mapping properties to functions, creates a\r\n * function producing an object of the same structure, by mapping each property\r\n * to the result of calling its associated function with the supplied arguments.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.20.0\r\n * @category Function\r\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\r\n * @param {Object} spec an object recursively mapping properties to functions for\r\n *        producing the values for these properties.\r\n * @return {Function} A function that returns an object of the same structure\r\n * as `spec', with each property set to the value returned by calling its\r\n * associated function with the supplied arguments.\r\n * @see R.converge, R.juxt\r\n * @example\r\n *\r\n *      const getMetrics = R.applySpec({\r\n *        sum: R.add,\r\n *        nested: { mul: R.multiply }\r\n *      });\r\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\r\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\r\n */\n\n\nvar applySpec = /*#__PURE__*/_curry1(function applySpec(spec) {\n  spec = mapValues(function (v) {\n    return typeof v == 'function' ? v : applySpec(v);\n  }, spec);\n  return curryN(reduce(max, 0, pluck('length', values(spec))), function () {\n    var args = arguments;\n    return mapValues(function (f) {\n      return apply(f, args);\n    }, spec);\n  });\n});\n\nexport default applySpec;","map":null,"metadata":{},"sourceType":"module"}