{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _omit = _interopRequireDefault(require(\"../run/omit\"));\n\nvar _height = _interopRequireDefault(require(\"../attributedString/height\"));\n\nvar ATTACHMENT_CODE = \"\\uFFFC\"; // 65532\n\n/**\r\n * Remove attachment attribute if no char present\r\n *\r\n * @param  {Object} attributed string\r\n * @return {Object} attributed string\r\n */\n\nvar purgeAttachments = R.when(R.compose(R.not, R.includes(ATTACHMENT_CODE), R.prop('string')), R.evolve({\n  runs: R.map((0, _omit.default)('attachment'))\n}));\n/**\r\n * Layout paragraphs inside rectangle\r\n *\r\n * @param  {Object} rect\r\n * @param  {Array} attributed strings\r\n * @return {Object} layout blocks\r\n */\n\nvar layoutLines = function layoutLines(rect, lines, indent) {\n  var currentY = rect.y;\n  return R.addIndex(R.map)(R.compose(purgeAttachments, function (line, i) {\n    var lineIndent = i === 0 ? indent : 0;\n    var style = R.pathOr({}, ['runs', 0, 'attributes'], line);\n    var height = Math.max((0, _height.default)(line), style.lineHeight);\n    var box = {\n      x: rect.x + lineIndent,\n      y: currentY,\n      width: rect.width - lineIndent,\n      height: height\n    };\n    currentY += height;\n    return R.compose(R.assoc('box', box), R.omit(['syllables']))(line);\n  }))(lines);\n};\n/**\r\n * Performs line breaking and layout\r\n *\r\n * @param  {Object} engines\r\n * @param  {Object}  layout options\r\n * @param  {Object} rect\r\n * @param  {Object} attributed string\r\n * @return {Object} layout block\r\n */\n\n\nvar layoutParagraph = function layoutParagraph(engines, options) {\n  return function (rect, paragraph) {\n    var indent = R.pathOr(0, ['runs', 0, 'attributes', 'indent'], paragraph);\n    var lines = engines.linebreaker(options)(paragraph, [rect.width - indent, rect.width]);\n    var lineFragments = layoutLines(rect, lines, indent);\n    return lineFragments;\n  };\n};\n\nvar _default = layoutParagraph;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}