{"ast":null,"code":"module.exports = parse;\n/**\r\n * expected argument lengths\r\n * @type {Object}\r\n */\n\nvar length = {\n  a: 7,\n  c: 6,\n  h: 1,\n  l: 2,\n  m: 2,\n  q: 4,\n  s: 4,\n  t: 2,\n  v: 1,\n  z: 0\n};\n/**\r\n * segment pattern\r\n * @type {RegExp}\r\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig;\n/**\r\n * parse an svg path data string. Generates an Array\r\n * of commands where each command is an Array of the\r\n * form `[command, arg1, arg2, ...]`\r\n *\r\n * @param {String} path\r\n * @return {Array}\r\n */\n\nfunction parse(path) {\n  var data = [];\n  path.replace(segment, function (_, command, args) {\n    var type = command.toLowerCase();\n    args = parseValues(args); // overloaded moveTo\n\n    if (type == 'm' && args.length > 2) {\n      data.push([command].concat(args.splice(0, 2)));\n      type = 'l';\n      command = command == 'm' ? 'l' : 'L';\n    }\n\n    while (true) {\n      if (args.length == length[type]) {\n        args.unshift(command);\n        return data.push(args);\n      }\n\n      if (args.length < length[type]) throw new Error('malformed path data');\n      data.push([command].concat(args.splice(0, length[type])));\n    }\n  });\n  return data;\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig;\n\nfunction parseValues(args) {\n  var numbers = args.match(number);\n  return numbers ? numbers.map(Number) : [];\n}","map":null,"metadata":{},"sourceType":"script"}