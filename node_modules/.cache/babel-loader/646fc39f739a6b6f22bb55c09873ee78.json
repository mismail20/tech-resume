{"ast":null,"code":"import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\n/**\r\n * Returns a new function much like the supplied one, except that the first two\r\n * arguments' order is reversed.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)\r\n * @param {Function} fn The function to invoke with its first two parameters reversed.\r\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\r\n * @example\r\n *\r\n *      const mergeThree = (a, b, c) => [].concat(a, b, c);\r\n *\r\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\r\n *\r\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\r\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\r\n */\n\nvar flip = /*#__PURE__*/_curry1(function flip(fn) {\n  return curryN(fn.length, function (a, b) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n  });\n});\n\nexport default flip;","map":null,"metadata":{},"sourceType":"module"}