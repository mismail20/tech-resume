{"ast":null,"code":"import _curry1 from './internal/_curry1.js';\nimport constructN from './constructN.js';\n/**\r\n * Wraps a constructor function inside a curried function that can be called\r\n * with the same arguments and returns the same type.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig (* -> {*}) -> (* -> {*})\r\n * @param {Function} fn The constructor function to wrap.\r\n * @return {Function} A wrapped, curried constructor function.\r\n * @see R.invoker\r\n * @example\r\n *\r\n *      // Constructor function\r\n *      function Animal(kind) {\r\n *        this.kind = kind;\r\n *      };\r\n *      Animal.prototype.sighting = function() {\r\n *        return \"It's a \" + this.kind + \"!\";\r\n *      }\r\n *\r\n *      const AnimalConstructor = R.construct(Animal)\r\n *\r\n *      // Notice we no longer need the 'new' keyword:\r\n *      AnimalConstructor('Pig'); //=> {\"kind\": \"Pig\", \"sighting\": function (){...}};\r\n *\r\n *      const animalTypes = [\"Lion\", \"Tiger\", \"Bear\"];\r\n *      const animalSighting = R.invoker(0, 'sighting');\r\n *      const sightNewAnimal = R.compose(animalSighting, AnimalConstructor);\r\n *      R.map(sightNewAnimal, animalTypes); //=> [\"It's a Lion!\", \"It's a Tiger!\", \"It's a Bear!\"]\r\n */\n\nvar construct = /*#__PURE__*/_curry1(function construct(Fn) {\n  return constructN(Fn.length, Fn);\n});\n\nexport default construct;","map":null,"metadata":{},"sourceType":"module"}