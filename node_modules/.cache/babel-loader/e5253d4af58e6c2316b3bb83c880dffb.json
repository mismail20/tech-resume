{"ast":null,"code":"import _arity from './internal/_arity.js';\nimport _curry1 from './internal/_curry1.js';\nimport map from './map.js';\nimport max from './max.js';\nimport reduce from './reduce.js';\n/**\r\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\r\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\r\n * to `fn` are applied to each of the predicates in turn until one returns a\r\n * \"truthy\" value, at which point `fn` returns the result of applying its\r\n * arguments to the corresponding transformer. If none of the predicates\r\n * matches, `fn` returns undefined.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.6.0\r\n * @category Logic\r\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\r\n * @param {Array} pairs A list of [predicate, transformer]\r\n * @return {Function}\r\n * @see R.ifElse, R.unless, R.when\r\n * @example\r\n *\r\n *      const fn = R.cond([\r\n *        [R.equals(0),   R.always('water freezes at 0°C')],\r\n *        [R.equals(100), R.always('water boils at 100°C')],\r\n *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\r\n *      ]);\r\n *      fn(0); //=> 'water freezes at 0°C'\r\n *      fn(50); //=> 'nothing special happens at 50°C'\r\n *      fn(100); //=> 'water boils at 100°C'\r\n */\n\nvar cond = /*#__PURE__*/_curry1(function cond(pairs) {\n  var arity = reduce(max, 0, map(function (pair) {\n    return pair[0].length;\n  }, pairs));\n  return _arity(arity, function () {\n    var idx = 0;\n\n    while (idx < pairs.length) {\n      if (pairs[idx][0].apply(this, arguments)) {\n        return pairs[idx][1].apply(this, arguments);\n      }\n\n      idx += 1;\n    }\n  });\n});\n\nexport default cond;","map":null,"metadata":{},"sourceType":"module"}