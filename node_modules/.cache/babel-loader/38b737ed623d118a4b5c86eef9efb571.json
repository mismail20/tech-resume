{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport curryN from './curryN.js';\n/**\r\n * Returns a function of arity `n` from a (manually) curried function.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.14.0\r\n * @category Function\r\n * @sig Number -> (a -> b) -> (a -> c)\r\n * @param {Number} length The arity for the returned function.\r\n * @param {Function} fn The function to uncurry.\r\n * @return {Function} A new function.\r\n * @see R.curry\r\n * @example\r\n *\r\n *      const addFour = a => b => c => d => a + b + c + d;\r\n *\r\n *      const uncurriedAddFour = R.uncurryN(4, addFour);\r\n *      uncurriedAddFour(1, 2, 3, 4); //=> 10\r\n */\n\nvar uncurryN = /*#__PURE__*/_curry2(function uncurryN(depth, fn) {\n  return curryN(depth, function () {\n    var currentDepth = 1;\n    var value = fn;\n    var idx = 0;\n    var endIdx;\n\n    while (currentDepth <= depth && typeof value === 'function') {\n      endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));\n      currentDepth += 1;\n      idx = endIdx;\n    }\n\n    return value;\n  });\n});\n\nexport default uncurryN;","map":null,"metadata":{},"sourceType":"module"}