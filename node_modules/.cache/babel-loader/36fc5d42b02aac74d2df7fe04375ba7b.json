{"ast":null,"code":"import curryN from './curryN.js';\nimport _curry1 from './internal/_curry1.js';\n/**\r\n * Creates a thunk out of a function. A thunk delays a calculation until\r\n * its result is needed, providing lazy evaluation of arguments.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @category Function\r\n * @sig ((a, b, ..., j) -> k) -> (a, b, ..., j) -> (() -> k)\r\n * @param {Function} fn A function to wrap in a thunk\r\n * @return {Function} Expects arguments for `fn` and returns a new function\r\n *  that, when called, applies those arguments to `fn`.\r\n * @see R.partial, R.partialRight\r\n * @example\r\n *\r\n *      R.thunkify(R.identity)(42)(); //=> 42\r\n *      R.thunkify((a, b) => a + b)(25, 17)(); //=> 42\r\n */\n\nvar thunkify = /*#__PURE__*/_curry1(function thunkify(fn) {\n  return curryN(fn.length, function createThunk() {\n    var fnArgs = arguments;\n    return function invokeThunk() {\n      return fn.apply(this, fnArgs);\n    };\n  });\n});\n\nexport default thunkify;","map":null,"metadata":{},"sourceType":"module"}