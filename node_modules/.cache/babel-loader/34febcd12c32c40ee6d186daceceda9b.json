{"ast":null,"code":"import composeK from './composeK.js';\nimport reverse from './reverse.js';\n/**\r\n * Returns the left-to-right Kleisli composition of the provided functions,\r\n * each of which must return a value of a type supported by [`chain`](#chain).\r\n *\r\n * `R.pipeK(f, g, h)` is equivalent to `R.pipe(f, R.chain(g), R.chain(h))`.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.16.0\r\n * @category Function\r\n * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)\r\n * @param {...Function}\r\n * @return {Function}\r\n * @see R.composeK\r\n * @deprecated since v0.26.0\r\n * @example\r\n *\r\n *      //  parseJson :: String -> Maybe *\r\n *      //  get :: String -> Object -> Maybe *\r\n *\r\n *      //  getStateCode :: Maybe String -> Maybe String\r\n *      const getStateCode = R.pipeK(\r\n *        parseJson,\r\n *        get('user'),\r\n *        get('address'),\r\n *        get('state'),\r\n *        R.compose(Maybe.of, R.toUpper)\r\n *      );\r\n *\r\n *      getStateCode('{\"user\":{\"address\":{\"state\":\"ny\"}}}');\r\n *      //=> Just('NY')\r\n *      getStateCode('[Invalid JSON]');\r\n *      //=> Nothing()\r\n * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))\r\n */\n\nexport default function pipeK() {\n  if (arguments.length === 0) {\n    throw new Error('pipeK requires at least one argument');\n  }\n\n  return composeK.apply(this, reverse(arguments));\n}","map":null,"metadata":{},"sourceType":"module"}