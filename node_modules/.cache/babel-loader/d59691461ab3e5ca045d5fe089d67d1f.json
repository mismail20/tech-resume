{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport _isArray from './internal/_isArray.js';\nimport _isFunction from './internal/_isFunction.js';\nimport _isString from './internal/_isString.js';\nimport toString from './toString.js';\n/**\r\n * Returns the result of concatenating the given lists or strings.\r\n *\r\n * Note: `R.concat` expects both arguments to be of the same type,\r\n * unlike the native `Array.prototype.concat` method. It will throw\r\n * an error if you `concat` an Array with a non-Array value.\r\n *\r\n * Dispatches to the `concat` method of the first argument, if present.\r\n * Can also concatenate two members of a [fantasy-land\r\n * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig [a] -> [a] -> [a]\r\n * @sig String -> String -> String\r\n * @param {Array|String} firstList The first list\r\n * @param {Array|String} secondList The second list\r\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\r\n * `secondList`.\r\n *\r\n * @example\r\n *\r\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\r\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\r\n *      R.concat([], []); //=> []\r\n */\n\nvar concat = /*#__PURE__*/_curry2(function concat(a, b) {\n  if (_isArray(a)) {\n    if (_isArray(b)) {\n      return a.concat(b);\n    }\n\n    throw new TypeError(toString(b) + ' is not an array');\n  }\n\n  if (_isString(a)) {\n    if (_isString(b)) {\n      return a + b;\n    }\n\n    throw new TypeError(toString(b) + ' is not a string');\n  }\n\n  if (a != null && _isFunction(a['fantasy-land/concat'])) {\n    return a['fantasy-land/concat'](b);\n  }\n\n  if (a != null && _isFunction(a.concat)) {\n    return a.concat(b);\n  }\n\n  throw new TypeError(toString(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\n});\n\nexport default concat;","map":null,"metadata":{},"sourceType":"module"}