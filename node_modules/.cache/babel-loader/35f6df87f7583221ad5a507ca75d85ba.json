{"ast":null,"code":"import _curryN from './internal/_curryN.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _has from './internal/_has.js';\nimport _reduce from './internal/_reduce.js';\nimport _xreduceBy from './internal/_xreduceBy.js';\n/**\r\n * Groups the elements of the list according to the result of calling\r\n * the String-returning function `keyFn` on each element and reduces the elements\r\n * of each group to a single value via the reducer function `valueFn`.\r\n *\r\n * This function is basically a more general [`groupBy`](#groupBy) function.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.20.0\r\n * @category List\r\n * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\r\n * @param {Function} valueFn The function that reduces the elements of each group to a single\r\n *        value. Receives two values, accumulator for a particular group and the current element.\r\n * @param {*} acc The (initial) accumulator value for each group.\r\n * @param {Function} keyFn The function that maps the list's element into a key.\r\n * @param {Array} list The array to group.\r\n * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\r\n *         `valueFn` for elements which produced that key when passed to `keyFn`.\r\n * @see R.groupBy, R.reduce\r\n * @example\r\n *\r\n *      const groupNames = (acc, {name}) => acc.concat(name)\r\n *      const toGrade = ({score}) =>\r\n *        score < 65 ? 'F' :\r\n *        score < 70 ? 'D' :\r\n *        score < 80 ? 'C' :\r\n *        score < 90 ? 'B' : 'A'\r\n *\r\n *      var students = [\r\n *        {name: 'Abby', score: 83},\r\n *        {name: 'Bart', score: 62},\r\n *        {name: 'Curt', score: 88},\r\n *        {name: 'Dora', score: 92},\r\n *      ]\r\n *\r\n *      reduceBy(groupNames, [], toGrade, students)\r\n *      //=> {\"A\": [\"Dora\"], \"B\": [\"Abby\", \"Curt\"], \"F\": [\"Bart\"]}\r\n */\n\nvar reduceBy = /*#__PURE__*/_curryN(4, [], /*#__PURE__*/_dispatchable([], _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {\n  return _reduce(function (acc, elt) {\n    var key = keyFn(elt);\n    acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);\n    return acc;\n  }, {}, list);\n}));\n\nexport default reduceBy;","map":null,"metadata":{},"sourceType":"module"}