{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport _isFunction from './internal/_isFunction.js';\nimport curryN from './curryN.js';\nimport toString from './toString.js';\n/**\r\n * Turns a named method with a specified arity into a function that can be\r\n * called directly supplied with arguments and a target object.\r\n *\r\n * The returned function is curried and accepts `arity + 1` parameters where\r\n * the final parameter is the target object.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\r\n * @param {Number} arity Number of arguments the returned function should take\r\n *        before the target object.\r\n * @param {String} method Name of the method to call.\r\n * @return {Function} A new curried function.\r\n * @see R.construct\r\n * @example\r\n *\r\n *      const sliceFrom = R.invoker(1, 'slice');\r\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\r\n *      const sliceFrom6 = R.invoker(2, 'slice')(6);\r\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\r\n * @symb R.invoker(0, 'method')(o) = o['method']()\r\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\r\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\r\n */\n\nvar invoker = /*#__PURE__*/_curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function () {\n    var target = arguments[arity];\n\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\n\nexport default invoker;","map":null,"metadata":{},"sourceType":"module"}