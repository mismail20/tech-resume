{"ast":null,"code":"import _arity from './internal/_arity.js';\nimport _pipe from './internal/_pipe.js';\nimport reduce from './reduce.js';\nimport tail from './tail.js';\n/**\r\n * Performs left-to-right function composition. The leftmost function may have\r\n * any arity; the remaining functions must be unary.\r\n *\r\n * In some libraries this function is named `sequence`.\r\n *\r\n * **Note:** The result of pipe is not automatically curried.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\r\n * @param {...Function} functions\r\n * @return {Function}\r\n * @see R.compose\r\n * @example\r\n *\r\n *      const f = R.pipe(Math.pow, R.negate, R.inc);\r\n *\r\n *      f(3, 4); // -(3^4) + 1\r\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\r\n */\n\nexport default function pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n\n  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n}","map":null,"metadata":{},"sourceType":"module"}