{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport _assertPromise from './internal/_assertPromise.js';\n/**\r\n * Returns the result of applying the onFailure function to the value inside\r\n * a failed promise. This is useful for handling rejected promises\r\n * inside function compositions.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @category Function\r\n * @sig (e -> b) -> (Promise e a) -> (Promise e b)\r\n * @sig (e -> (Promise f b)) -> (Promise e a) -> (Promise f b)\r\n * @param {Function} onFailure The function to apply. Can return a value or a promise of a value.\r\n * @param {Promise} p\r\n * @return {Promise} The result of calling `p.then(null, onFailure)`\r\n * @see R.then\r\n * @example\r\n *\r\n *      var failedFetch = (id) => Promise.reject('bad ID');\r\n *      var useDefault = () => ({ firstName: 'Bob', lastName: 'Loblaw' })\r\n *\r\n *      //recoverFromFailure :: String -> Promise ({firstName, lastName})\r\n *      var recoverFromFailure = R.pipe(\r\n *        failedFetch,\r\n *        R.otherwise(useDefault),\r\n *        R.then(R.pick(['firstName', 'lastName'])),\r\n *      );\r\n *      recoverFromFailure(12345).then(console.log)\r\n */\n\nvar otherwise = /*#__PURE__*/_curry2(function otherwise(f, p) {\n  _assertPromise('otherwise', p);\n\n  return p.then(null, f);\n});\n\nexport default otherwise;","map":null,"metadata":{},"sourceType":"module"}