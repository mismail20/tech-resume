{"ast":null,"code":"import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\nimport max from './max.js';\nimport pluck from './pluck.js';\nimport reduce from './reduce.js';\n/**\r\n * Takes a list of predicates and returns a predicate that returns true for a\r\n * given list of arguments if at least one of the provided predicates is\r\n * satisfied by those arguments.\r\n *\r\n * The function returned is a curried function whose arity matches that of the\r\n * highest-arity predicate.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.9.0\r\n * @category Logic\r\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\r\n * @param {Array} predicates An array of predicates to check\r\n * @return {Function} The combined predicate\r\n * @see R.allPass\r\n * @example\r\n *\r\n *      const isClub = R.propEq('suit', '♣');\r\n *      const isSpade = R.propEq('suit', '♠');\r\n *      const isBlackCard = R.anyPass([isClub, isSpade]);\r\n *\r\n *      isBlackCard({rank: '10', suit: '♣'}); //=> true\r\n *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true\r\n *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false\r\n */\n\nvar anyPass = /*#__PURE__*/_curry1(function anyPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function () {\n    var idx = 0;\n    var len = preds.length;\n\n    while (idx < len) {\n      if (preds[idx].apply(this, arguments)) {\n        return true;\n      }\n\n      idx += 1;\n    }\n\n    return false;\n  });\n});\n\nexport default anyPass;","map":null,"metadata":{},"sourceType":"module"}