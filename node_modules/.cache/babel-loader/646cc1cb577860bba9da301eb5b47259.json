{"ast":null,"code":"import _curry3 from './internal/_curry3.js';\nimport _has from './internal/_has.js';\n/**\r\n * Creates a new object with the own properties of the two provided objects. If\r\n * a key exists in both objects, the provided function is applied to the key\r\n * and the values associated with the key in each object, with the result being\r\n * used as the value associated with the key in the returned object.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category Object\r\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\r\n * @param {Function} fn\r\n * @param {Object} l\r\n * @param {Object} r\r\n * @return {Object}\r\n * @see R.mergeDeepWithKey, R.merge, R.mergeWith\r\n * @example\r\n *\r\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\r\n *      R.mergeWithKey(concatValues,\r\n *                     { a: true, thing: 'foo', values: [10, 20] },\r\n *                     { b: true, thing: 'bar', values: [15, 35] });\r\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\r\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\r\n */\n\nvar mergeWithKey = /*#__PURE__*/_curry3(function mergeWithKey(fn, l, r) {\n  var result = {};\n  var k;\n\n  for (k in l) {\n    if (_has(k, l)) {\n      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n    }\n  }\n\n  for (k in r) {\n    if (_has(k, r) && !_has(k, result)) {\n      result[k] = r[k];\n    }\n  }\n\n  return result;\n});\n\nexport default mergeWithKey;","map":null,"metadata":{},"sourceType":"module"}