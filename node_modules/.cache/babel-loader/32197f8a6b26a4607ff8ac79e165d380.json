{"ast":null,"code":"import _curry3 from './internal/_curry3.js';\nimport map from './map.js';\nimport sequence from './sequence.js';\n/**\r\n * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\r\n * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\r\n * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\r\n * into an Applicative of Traversable.\r\n *\r\n * Dispatches to the `traverse` method of the third argument, if present.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category List\r\n * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\r\n * @param {Function} of\r\n * @param {Function} f\r\n * @param {*} traversable\r\n * @return {*}\r\n * @see R.sequence\r\n * @example\r\n *\r\n *      // Returns `Maybe.Nothing` if the given divisor is `0`\r\n *      const safeDiv = n => d => d === 0 ? Maybe.Nothing() : Maybe.Just(n / d)\r\n *\r\n *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Maybe.Just([5, 2.5, 2])\r\n *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Maybe.Nothing\r\n */\n\nvar traverse = /*#__PURE__*/_curry3(function traverse(of, f, traversable) {\n  return typeof traversable['fantasy-land/traverse'] === 'function' ? traversable['fantasy-land/traverse'](f, of) : sequence(of, map(f, traversable));\n});\n\nexport default traverse;","map":null,"metadata":{},"sourceType":"module"}