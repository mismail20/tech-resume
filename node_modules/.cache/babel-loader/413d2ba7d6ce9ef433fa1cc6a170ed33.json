{"ast":null,"code":"import _concat from './internal/_concat.js';\nimport _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\n/**\r\n * Creates a new list iteration function from an existing one by adding two new\r\n * parameters to its callback function: the current index, and the entire list.\r\n *\r\n * This would turn, for instance, [`R.map`](#map) function into one that\r\n * more closely resembles `Array.prototype.map`. Note that this will only work\r\n * for functions in which the iteration callback function is the first\r\n * parameter, and where the list is the last parameter. (This latter might be\r\n * unimportant if the list parameter is not used.)\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.15.0\r\n * @category Function\r\n * @category List\r\n * @sig ((a ... -> b) ... -> [a] -> *) -> ((a ..., Int, [a] -> b) ... -> [a] -> *)\r\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\r\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\r\n * @example\r\n *\r\n *      const mapIndexed = R.addIndex(R.map);\r\n *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\r\n *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\r\n */\n\nvar addIndex = /*#__PURE__*/_curry1(function addIndex(fn) {\n  return curryN(fn.length, function () {\n    var idx = 0;\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var args = Array.prototype.slice.call(arguments, 0);\n\n    args[0] = function () {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx += 1;\n      return result;\n    };\n\n    return fn.apply(this, args);\n  });\n});\n\nexport default addIndex;","map":null,"metadata":{},"sourceType":"module"}