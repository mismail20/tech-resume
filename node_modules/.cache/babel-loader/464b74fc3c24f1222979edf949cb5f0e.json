{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport map from './map.js';\n/**\r\n * Returns a lens for the given getter and setter functions. The getter \"gets\"\r\n * the value of the focus; the setter \"sets\" the value of the focus. The setter\r\n * should not mutate the data structure.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.8.0\r\n * @category Object\r\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\r\n * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\r\n * @param {Function} getter\r\n * @param {Function} setter\r\n * @return {Lens}\r\n * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\r\n * @example\r\n *\r\n *      const xLens = R.lens(R.prop('x'), R.assoc('x'));\r\n *\r\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\r\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\r\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\r\n */\n\nvar lens = /*#__PURE__*/_curry2(function lens(getter, setter) {\n  return function (toFunctorFn) {\n    return function (target) {\n      return map(function (focus) {\n        return setter(focus, target);\n      }, toFunctorFn(getter(target)));\n    };\n  };\n});\n\nexport default lens;","map":null,"metadata":{},"sourceType":"module"}