{"ast":null,"code":"import _curry1 from './internal/_curry1.js';\n/**\r\n * Takes a function `fn`, which takes a single array argument, and returns a\r\n * function which:\r\n *\r\n *   - takes any number of positional arguments;\r\n *   - passes these arguments to `fn` as an array; and\r\n *   - returns the result.\r\n *\r\n * In other words, `R.unapply` derives a variadic function from a function which\r\n * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.8.0\r\n * @category Function\r\n * @sig ([*...] -> a) -> (*... -> a)\r\n * @param {Function} fn\r\n * @return {Function}\r\n * @see R.apply\r\n * @example\r\n *\r\n *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\r\n * @symb R.unapply(f)(a, b) = f([a, b])\r\n */\n\nvar unapply = /*#__PURE__*/_curry1(function unapply(fn) {\n  return function () {\n    return fn(Array.prototype.slice.call(arguments, 0));\n  };\n});\n\nexport default unapply;","map":null,"metadata":{},"sourceType":"module"}