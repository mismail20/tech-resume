{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _layout = _interopRequireDefault(require(\"@react-pdf/textkit/lib/layout\"));\n\nvar _linebreaker = _interopRequireDefault(require(\"@react-pdf/textkit/lib/engines/linebreaker\"));\n\nvar _justification = _interopRequireDefault(require(\"@react-pdf/textkit/lib/engines/justification\"));\n\nvar _textDecoration = _interopRequireDefault(require(\"@react-pdf/textkit/lib/engines/textDecoration\"));\n\nvar _scriptItemizer = _interopRequireDefault(require(\"@react-pdf/textkit/lib/engines/scriptItemizer\"));\n\nvar _wordHyphenation = _interopRequireDefault(require(\"@react-pdf/textkit/lib/engines/wordHyphenation\"));\n\nvar _fontSubstitution = _interopRequireDefault(require(\"./fontSubstitution\"));\n\nvar _getAttributedString = _interopRequireDefault(require(\"./getAttributedString\"));\n\nvar engines = {\n  linebreaker: _linebreaker.default,\n  justification: _justification.default,\n  textDecoration: _textDecoration.default,\n  scriptItemizer: _scriptItemizer.default,\n  wordHyphenation: _wordHyphenation.default,\n  fontSubstitution: _fontSubstitution.default\n};\nvar engine = (0, _layout.default)(engines);\nvar getMaxLines = R.path(['style', 'maxLines']);\nvar getTextOverflow = R.path(['style', 'textOverflow']);\n/**\r\n * Get layout container for specific text node\r\n *\r\n * @param {Number} width\r\n * @param {Number} height\r\n * @param {Object} node\r\n * @returns {Object} layout container\r\n */\n\nvar getContainer = function getContainer(width, height, node) {\n  var maxLines = getMaxLines(node);\n  var textOverflow = getTextOverflow(node);\n  return {\n    x: 0,\n    y: 0,\n    width: width,\n    maxLines: maxLines,\n    height: height || Infinity,\n    truncateMode: textOverflow\n  };\n};\n/**\r\n * Get text layout options for specific text node\r\n *\r\n * @param {Object} node instance\r\n * @returns {Object} layout options\r\n */\n\n\nvar getLayoutOptions = function getLayoutOptions(fontStore, node) {\n  return {\n    hyphenationPenalty: node.props.hyphenationPenalty,\n    shrinkWhitespaceFactor: {\n      before: -0.5,\n      after: -0.5\n    },\n    hyphenationCallback: node.props.hyphenationCallback || (fontStore === null || fontStore === void 0 ? void 0 : fontStore.getHyphenationCallback()) || null\n  };\n};\n/**\r\n * Get text lines for given node\r\n *\r\n * @param {Object} node\r\n * @param {Number} container width\r\n * @param {Number} container height\r\n * @param {Number} fontStore font store\r\n * @returns {Array} layout lines\r\n */\n\n\nvar layoutText = function layoutText(node, width, height, fontStore) {\n  var attributedString = (0, _getAttributedString.default)(fontStore, node);\n  var container = getContainer(width, height, node);\n  var options = getLayoutOptions(fontStore, node);\n  var lines = engine(attributedString, container, options);\n  return R.reduce(R.concat, [], lines);\n};\n\nvar _default = R.curryN(4, layoutText);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}