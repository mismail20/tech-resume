{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport equals from './equals.js';\nimport map from './map.js';\nimport where from './where.js';\n/**\r\n * Takes a spec object and a test object; returns true if the test satisfies\r\n * the spec, false otherwise. An object satisfies the spec if, for each of the\r\n * spec's own properties, accessing that property of the object gives the same\r\n * value (in [`R.equals`](#equals) terms) as accessing that property of the\r\n * spec.\r\n *\r\n * `whereEq` is a specialization of [`where`](#where).\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.14.0\r\n * @category Object\r\n * @sig {String: *} -> {String: *} -> Boolean\r\n * @param {Object} spec\r\n * @param {Object} testObj\r\n * @return {Boolean}\r\n * @see R.propEq, R.where\r\n * @example\r\n *\r\n *      // pred :: Object -> Boolean\r\n *      const pred = R.whereEq({a: 1, b: 2});\r\n *\r\n *      pred({a: 1});              //=> false\r\n *      pred({a: 1, b: 2});        //=> true\r\n *      pred({a: 1, b: 2, c: 3});  //=> true\r\n *      pred({a: 1, b: 1});        //=> false\r\n */\n\nvar whereEq = /*#__PURE__*/_curry2(function whereEq(spec, testObj) {\n  return where(map(equals, spec), testObj);\n});\n\nexport default whereEq;","map":null,"metadata":{},"sourceType":"module"}