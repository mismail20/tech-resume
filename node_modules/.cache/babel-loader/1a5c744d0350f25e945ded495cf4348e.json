{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport _has from './internal/_has.js';\n/**\r\n * Takes a spec object and a test object; returns true if the test satisfies\r\n * the spec. Each of the spec's own properties must be a predicate function.\r\n * Each predicate is applied to the value of the corresponding property of the\r\n * test object. `where` returns true if all the predicates return true, false\r\n * otherwise.\r\n *\r\n * `where` is well suited to declaratively expressing constraints for other\r\n * functions such as [`filter`](#filter) and [`find`](#find).\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.1\r\n * @category Object\r\n * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\r\n * @param {Object} spec\r\n * @param {Object} testObj\r\n * @return {Boolean}\r\n * @see R.propSatisfies, R.whereEq\r\n * @example\r\n *\r\n *      // pred :: Object -> Boolean\r\n *      const pred = R.where({\r\n *        a: R.equals('foo'),\r\n *        b: R.complement(R.equals('bar')),\r\n *        x: R.gt(R.__, 10),\r\n *        y: R.lt(R.__, 20)\r\n *      });\r\n *\r\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\r\n *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\r\n *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\r\n *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\r\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\r\n */\n\nvar where = /*#__PURE__*/_curry2(function where(spec, testObj) {\n  for (var prop in spec) {\n    if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n      return false;\n    }\n  }\n\n  return true;\n});\n\nexport default where;","map":null,"metadata":{},"sourceType":"module"}