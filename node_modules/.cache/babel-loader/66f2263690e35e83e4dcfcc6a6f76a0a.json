{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n/**\r\n * Map list by index\r\n * Accepts up to 3 functions:\r\n *   - Will apply first function to first value\r\n *   - Will apply last function to last value\r\n *   - Will apply the other function to the rest of values\r\n *\r\n * @param  {Array}  list\r\n * @param  {Array}  functions\r\n * @return {Array} mapped array\r\n */\n\n\nvar mapIndexed = function mapIndexed(fns, list) {\n  if (fns === void 0) {\n    fns = [];\n  }\n\n  if (list === void 0) {\n    list = [];\n  }\n\n  var length = list.length - 1;\n  return R.addIndex(R.map)(function (value, idx) {\n    if (idx === 0) return R.head(fns)(value, idx);\n    if (idx === length) return R.last(fns)(value, idx);\n    return (fns[1] || fns[0])(value, idx);\n  })(list);\n};\n\nvar _default = R.curryN(2, mapIndexed);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}