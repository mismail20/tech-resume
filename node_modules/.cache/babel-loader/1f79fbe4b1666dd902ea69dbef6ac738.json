{"ast":null,"code":"import _arity from './internal/_arity.js';\nimport _curry2 from './internal/_curry2.js';\n/**\r\n * Creates a function that is bound to a context.\r\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\r\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.6.0\r\n * @category Function\r\n * @category Object\r\n * @sig (* -> *) -> {*} -> (* -> *)\r\n * @param {Function} fn The function to bind to context\r\n * @param {Object} thisObj The context to bind `fn` to\r\n * @return {Function} A function that will execute in the context of `thisObj`.\r\n * @see R.partial\r\n * @example\r\n *\r\n *      const log = R.bind(console.log, console);\r\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\r\n *      // logs {a: 2}\r\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\r\n */\n\nvar bind = /*#__PURE__*/_curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function () {\n    return fn.apply(thisObj, arguments);\n  });\n});\n\nexport default bind;","map":null,"metadata":{},"sourceType":"module"}