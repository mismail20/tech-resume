{"ast":null,"code":"import _isArray from './_isArray.js';\n/**\r\n * This checks whether a function has a [methodname] function. If it isn't an\r\n * array it will execute that function otherwise it will default to the ramda\r\n * implementation.\r\n *\r\n * @private\r\n * @param {Function} fn ramda implemtation\r\n * @param {String} methodname property to check for a custom implementation\r\n * @return {Object} Whatever the return value of the method is.\r\n */\n\nexport default function _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n\n    if (length === 0) {\n      return fn();\n    }\n\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}","map":null,"metadata":{},"sourceType":"module"}