{"ast":null,"code":"import _curry3 from './internal/_curry3.js';\nimport concat from './concat.js';\nimport differenceWith from './differenceWith.js';\n/**\r\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\r\n * second list, but not both. Duplication is determined according to the value\r\n * returned by applying the supplied predicate to two list elements.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category Relation\r\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\r\n * @param {Function} pred A predicate used to test whether two items are equal.\r\n * @param {Array} list1 The first list.\r\n * @param {Array} list2 The second list.\r\n * @return {Array} The elements in `list1` or `list2`, but not both.\r\n * @see R.symmetricDifference, R.difference, R.differenceWith\r\n * @example\r\n *\r\n *      const eqA = R.eqBy(R.prop('a'));\r\n *      const l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\r\n *      const l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\r\n *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\r\n */\n\nvar symmetricDifferenceWith = /*#__PURE__*/_curry3(function symmetricDifferenceWith(pred, list1, list2) {\n  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n});\n\nexport default symmetricDifferenceWith;","map":null,"metadata":{},"sourceType":"module"}