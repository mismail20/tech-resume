{"ast":null,"code":"import _includesWith from './internal/_includesWith.js';\nimport _curry2 from './internal/_curry2.js';\n/**\r\n * Returns a new list containing only one copy of each element in the original\r\n * list, based upon the value returned by applying the supplied predicate to\r\n * two list elements. Prefers the first item if two items compare equal based\r\n * on the predicate.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.2.0\r\n * @category List\r\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\r\n * @param {Function} pred A predicate used to test whether two items are equal.\r\n * @param {Array} list The array to consider.\r\n * @return {Array} The list of unique items.\r\n * @example\r\n *\r\n *      const strEq = R.eqBy(String);\r\n *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\r\n *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\r\n *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\r\n *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\r\n */\n\nvar uniqWith = /*#__PURE__*/_curry2(function uniqWith(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var item;\n\n  while (idx < len) {\n    item = list[idx];\n\n    if (!_includesWith(pred, item, result)) {\n      result[result.length] = item;\n    }\n\n    idx += 1;\n  }\n\n  return result;\n});\n\nexport default uniqWith;","map":null,"metadata":{},"sourceType":"module"}