{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport curryN from './curryN.js';\n/**\r\n * Accepts a function `fn` and a list of transformer functions and returns a\r\n * new curried function. When the new function is invoked, it calls the\r\n * function `fn` with parameters consisting of the result of calling each\r\n * supplied handler on successive arguments to the new function.\r\n *\r\n * If more arguments are passed to the returned function than transformer\r\n * functions, those arguments are passed directly to `fn` as additional\r\n * parameters. If you expect additional arguments that don't need to be\r\n * transformed, although you can ignore them, it's best to pass an identity\r\n * function so that the new function reports the correct arity.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\r\n * @param {Function} fn The function to wrap.\r\n * @param {Array} transformers A list of transformer functions\r\n * @return {Function} The wrapped function.\r\n * @see R.converge\r\n * @example\r\n *\r\n *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\r\n *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\r\n *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\r\n *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\r\n * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))\r\n */\n\nvar useWith = /*#__PURE__*/_curry2(function useWith(fn, transformers) {\n  return curryN(transformers.length, function () {\n    var args = [];\n    var idx = 0;\n\n    while (idx < transformers.length) {\n      args.push(transformers[idx].call(this, arguments[idx]));\n      idx += 1;\n    }\n\n    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));\n  });\n});\n\nexport default useWith;","map":null,"metadata":{},"sourceType":"module"}