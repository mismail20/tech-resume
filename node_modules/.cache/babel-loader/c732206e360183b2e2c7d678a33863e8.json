{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\n/**\r\n * Creates a new list out of the two supplied by pairing up equally-positioned\r\n * items from both lists. The returned list is truncated to the length of the\r\n * shorter of the two input lists.\r\n * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig [a] -> [b] -> [[a,b]]\r\n * @param {Array} list1 The first array to consider.\r\n * @param {Array} list2 The second array to consider.\r\n * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\r\n * @example\r\n *\r\n *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\r\n * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]\r\n */\n\nvar zip = /*#__PURE__*/_curry2(function zip(a, b) {\n  var rv = [];\n  var idx = 0;\n  var len = Math.min(a.length, b.length);\n\n  while (idx < len) {\n    rv[idx] = [a[idx], b[idx]];\n    idx += 1;\n  }\n\n  return rv;\n});\n\nexport default zip;","map":null,"metadata":{},"sourceType":"module"}