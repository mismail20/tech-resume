{"ast":null,"code":"import _reduce from './internal/_reduce.js';\nimport _xwrap from './internal/_xwrap.js';\nimport curryN from './curryN.js';\n/**\r\n * Initializes a transducer using supplied iterator function. Returns a single\r\n * item by iterating through the list, successively calling the transformed\r\n * iterator function and passing it an accumulator value and the current value\r\n * from the array, and then passing the result to the next call.\r\n *\r\n * The iterator function receives two values: *(acc, value)*. It will be\r\n * wrapped as a transformer to initialize the transducer. A transformer can be\r\n * passed directly in place of an iterator function. In both cases, iteration\r\n * may be stopped early with the [`R.reduced`](#reduced) function.\r\n *\r\n * A transducer is a function that accepts a transformer and returns a\r\n * transformer and can be composed directly.\r\n *\r\n * A transformer is an an object that provides a 2-arity reducing iterator\r\n * function, step, 0-arity initial value function, init, and 1-arity result\r\n * extraction function, result. The step function is used as the iterator\r\n * function in reduce. The result function is used to convert the final\r\n * accumulator into the return type and in most cases is\r\n * [`R.identity`](#identity). The init function can be used to provide an\r\n * initial accumulator, but is ignored by transduce.\r\n *\r\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.12.0\r\n * @category List\r\n * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a\r\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\r\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\r\n *        current element from the array. Wrapped as transformer, if necessary, and used to\r\n *        initialize the transducer\r\n * @param {*} acc The initial accumulator value.\r\n * @param {Array} list The list to iterate over.\r\n * @return {*} The final, accumulated value.\r\n * @see R.reduce, R.reduced, R.into\r\n * @example\r\n *\r\n *      const numbers = [1, 2, 3, 4];\r\n *      const transducer = R.compose(R.map(R.add(1)), R.take(2));\r\n *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\r\n *\r\n *      const isOdd = (x) => x % 2 === 1;\r\n *      const firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));\r\n *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]\r\n */\n\nvar transduce = /*#__PURE__*/curryN(4, function transduce(xf, fn, acc, list) {\n  return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n});\nexport default transduce;","map":null,"metadata":{},"sourceType":"module"}