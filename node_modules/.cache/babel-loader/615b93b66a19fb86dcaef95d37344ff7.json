{"ast":null,"code":"import _curry3 from './internal/_curry3.js';\n/**\r\n * Creates a new list out of the two supplied by applying the function to each\r\n * equally-positioned pair in the lists. The returned list is truncated to the\r\n * length of the shorter of the two input lists.\r\n *\r\n * @function\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig ((a, b) -> c) -> [a] -> [b] -> [c]\r\n * @param {Function} fn The function used to combine the two elements into one value.\r\n * @param {Array} list1 The first array to consider.\r\n * @param {Array} list2 The second array to consider.\r\n * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\r\n *         using `fn`.\r\n * @example\r\n *\r\n *      const f = (x, y) => {\r\n *        // ...\r\n *      };\r\n *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\r\n *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\r\n * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]\r\n */\n\nvar zipWith = /*#__PURE__*/_curry3(function zipWith(fn, a, b) {\n  var rv = [];\n  var idx = 0;\n  var len = Math.min(a.length, b.length);\n\n  while (idx < len) {\n    rv[idx] = fn(a[idx], b[idx]);\n    idx += 1;\n  }\n\n  return rv;\n});\n\nexport default zipWith;","map":null,"metadata":{},"sourceType":"module"}