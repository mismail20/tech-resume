{"ast":null,"code":"import _arity from './_arity.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n/**\r\n * Internal curryN function.\r\n *\r\n * @private\r\n * @category Function\r\n * @param {Number} length The arity of the curried function.\r\n * @param {Array} received An array of arguments received thus far.\r\n * @param {Function} fn The function to curry.\r\n * @return {Function} The curried function.\r\n */\n\nexport default function _curryN(length, received, fn) {\n  return function () {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n\n      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n\n      combined[combinedIdx] = result;\n\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n\n      combinedIdx += 1;\n    }\n\n    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n  };\n}","map":null,"metadata":{},"sourceType":"module"}