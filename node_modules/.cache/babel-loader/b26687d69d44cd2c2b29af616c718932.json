{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar isNotArray = R.complement(R.is(Array));\nvar castArray = R.when(isNotArray, function (v) {\n  return [v];\n});\n/**\r\n * Remove nil values from array\r\n *\r\n * @param {Array} array\r\n * @returns {Array} array without nils\r\n */\n\nvar compact = R.filter(Boolean);\n/**\r\n * Checks if value is array\r\n *\r\n * @param {any} value\r\n * @returns {Boolean} is value an array\r\n */\n\nvar isArray = R.is(Array);\n/**\r\n * Merges style objects array\r\n *\r\n * @param {Array} style objects array\r\n * @returns {Object} merged style object\r\n */\n\nvar mergeStyles = function mergeStyles(styles) {\n  return styles.reduce(function (acc, style) {\n    var s = isArray(style) ? flatten(style) : style;\n    Object.keys(s).forEach(function (key) {\n      if (s[key] !== null && s[key] !== undefined) {\n        acc[key] = s[key];\n      }\n    });\n    return acc;\n  }, {});\n};\n/**\r\n * Flattens an array of style objects, into one aggregated style object.\r\n *\r\n * @param {Array} style objects array\r\n * @returns {Object} flatted style object\r\n */\n\n\nvar flatten = R.compose(mergeStyles, compact, castArray);\nvar _default = flatten;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}