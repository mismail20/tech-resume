{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\n/**\r\n * Takes a list and returns a list of lists where each sublist's elements are\r\n * all satisfied pairwise comparison according to the provided function.\r\n * Only adjacent elements are passed to the comparison function.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.21.0\r\n * @category List\r\n * @sig ((a, a) → Boolean) → [a] → [[a]]\r\n * @param {Function} fn Function for determining whether two given (adjacent)\r\n *        elements should be in the same group\r\n * @param {Array} list The array to group. Also accepts a string, which will be\r\n *        treated as a list of characters.\r\n * @return {List} A list that contains sublists of elements,\r\n *         whose concatenations are equal to the original list.\r\n * @example\r\n *\r\n * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\r\n * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\r\n *\r\n * R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])\r\n * //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]\r\n *\r\n * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\r\n * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\r\n *\r\n * R.groupWith(R.eqBy(isVowel), 'aestiou')\r\n * //=> ['ae', 'st', 'iou']\r\n */\n\nvar groupWith = /*#__PURE__*/_curry2(function (fn, list) {\n  var res = [];\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    var nextidx = idx + 1;\n\n    while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {\n      nextidx += 1;\n    }\n\n    res.push(list.slice(idx, nextidx));\n    idx = nextidx;\n  }\n\n  return res;\n});\n\nexport default groupWith;","map":null,"metadata":{},"sourceType":"module"}