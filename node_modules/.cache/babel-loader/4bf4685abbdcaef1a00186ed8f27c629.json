{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _matchPercent = _interopRequireDefault(require(\"../utils/matchPercent\"));\n/**\r\n * Transform percent height into fixed\r\n *\r\n * @param {String | number} height\r\n * @return {number} height\r\n */\n\n\nvar transformHeight = function transformHeight(pageArea) {\n  return function (height) {\n    var match = (0, _matchPercent.default)(height);\n    return match ? match.percent * pageArea : height;\n  };\n};\n/**\r\n * Get page area (height minus paddings)\r\n *\r\n * @param {Object} page\r\n * @return {number} page area\r\n */\n\n\nvar getPageArea = function getPageArea(page) {\n  var pageHeight = R.path(['style', 'height'], page);\n  var pagePaddingTop = R.pathOr(0, ['style', 'paddingTop'], page);\n  var pagePaddingBottom = R.pathOr(0, ['style', 'paddingBottom'], page);\n  return pageHeight - pagePaddingTop - pagePaddingBottom;\n};\n/**\r\n * Checks if page has height\r\n *\r\n * @param {Object} page\r\n * @return {boolean} page has height\r\n */\n\n\nvar hasHeight = R.hasPath(['style', 'height']);\n/**\r\n * Transform node percent height to fixed\r\n *\r\n * @param {Object} page\r\n * @param {Object} node\r\n * @return {Object} transformed node\r\n */\n\nvar resolveNodePercentHeight = function resolveNodePercentHeight(page) {\n  return function (node) {\n    if (hasHeight(page)) {\n      var pageArea = getPageArea(page);\n      return R.evolve({\n        style: {\n          height: transformHeight(pageArea)\n        }\n      })(node);\n    }\n\n    return node;\n  };\n};\n/**\r\n * Transform page immediate children with percent height to fixed\r\n *\r\n * @param {Object} page\r\n * @return {Object} transformed page\r\n */\n\n\nvar resolvePagePercentHeight = function resolvePagePercentHeight(page) {\n  return R.evolve({\n    children: R.map(resolveNodePercentHeight(page))\n  })(page);\n};\n/**\r\n * Transform all page immediate children with percent height to fixed.\r\n * This is needed for computing correct dimensions on pre-pagination layout.\r\n *\r\n * @param {Object} document root\r\n * @return {Object} transformed document root\r\n */\n\n\nvar resolvePercentHeight = R.evolve({\n  children: R.map(resolvePagePercentHeight)\n});\nvar _default = resolvePercentHeight;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}