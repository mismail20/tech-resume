{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\n/**\r\n * Builds a list from a seed value. Accepts an iterator function, which returns\r\n * either false to stop iteration or an array of length 2 containing the value\r\n * to add to the resulting list and the seed to be used in the next call to the\r\n * iterator function.\r\n *\r\n * The iterator function receives one argument: *(seed)*.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.10.0\r\n * @category List\r\n * @sig (a -> [b]) -> * -> [b]\r\n * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\r\n *        either false to quit iteration or an array of length two to proceed. The element\r\n *        at index 0 of this array will be added to the resulting array, and the element\r\n *        at index 1 will be passed to the next call to `fn`.\r\n * @param {*} seed The seed value.\r\n * @return {Array} The final list.\r\n * @example\r\n *\r\n *      const f = n => n > 50 ? false : [-n, n + 10];\r\n *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\r\n * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]\r\n */\n\nvar unfold = /*#__PURE__*/_curry2(function unfold(fn, seed) {\n  var pair = fn(seed);\n  var result = [];\n\n  while (pair && pair.length) {\n    result[result.length] = pair[0];\n    pair = fn(pair[1]);\n  }\n\n  return result;\n});\n\nexport default unfold;","map":null,"metadata":{},"sourceType":"module"}