{"ast":null,"code":"import _isArray from './_isArray.js';\nimport _isTransformer from './_isTransformer.js';\n/**\r\n * Returns a function that dispatches with different strategies based on the\r\n * object in list position (last argument). If it is an array, executes [fn].\r\n * Otherwise, if it has a function with one of the given method names, it will\r\n * execute that function (functor case). Otherwise, if it is a transformer,\r\n * uses transducer [xf] to return a new transformer (transducer case).\r\n * Otherwise, it will default to executing [fn].\r\n *\r\n * @private\r\n * @param {Array} methodNames properties to check for a custom implementation\r\n * @param {Function} xf transducer to initialize if object is transformer\r\n * @param {Function} fn default ramda implementation\r\n * @return {Function} A function that dispatches on object in list position\r\n */\n\nexport default function _dispatchable(methodNames, xf, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n\n    if (!_isArray(obj)) {\n      var idx = 0;\n\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n\n        idx += 1;\n      }\n\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n\n    return fn.apply(this, arguments);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}