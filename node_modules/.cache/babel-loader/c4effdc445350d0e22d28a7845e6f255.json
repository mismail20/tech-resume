{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\n/**\r\n * Takes a list and a predicate and returns a pair of lists with the following properties:\r\n *\r\n *  - the result of concatenating the two output lists is equivalent to the input list;\r\n *  - none of the elements of the first output list satisfies the predicate; and\r\n *  - if the second output list is non-empty, its first element satisfies the predicate.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\r\n * @param {Function} pred The predicate that determines where the array is split.\r\n * @param {Array} list The array to be split.\r\n * @return {Array}\r\n * @example\r\n *\r\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\r\n */\n\nvar splitWhen = /*#__PURE__*/_curry2(function splitWhen(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var prefix = [];\n\n  while (idx < len && !pred(list[idx])) {\n    prefix.push(list[idx]);\n    idx += 1;\n  }\n\n  return [prefix, Array.prototype.slice.call(list, idx)];\n});\n\nexport default splitWhen;","map":null,"metadata":{},"sourceType":"module"}