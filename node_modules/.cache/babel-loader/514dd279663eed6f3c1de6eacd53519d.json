{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _filter from './internal/_filter.js';\nimport _isObject from './internal/_isObject.js';\nimport _reduce from './internal/_reduce.js';\nimport _xfilter from './internal/_xfilter.js';\nimport keys from './keys.js';\n/**\r\n * Takes a predicate and a `Filterable`, and returns a new filterable of the\r\n * same type containing the members of the given filterable which satisfy the\r\n * given predicate. Filterable objects include plain objects or any object\r\n * that has a filter method such as `Array`.\r\n *\r\n * Dispatches to the `filter` method of the second argument, if present.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\r\n * @param {Function} pred\r\n * @param {Array} filterable\r\n * @return {Array} Filterable\r\n * @see R.reject, R.transduce, R.addIndex\r\n * @example\r\n *\r\n *      const isEven = n => n % 2 === 0;\r\n *\r\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\r\n *\r\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\r\n */\n\nvar filter = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['filter'], _xfilter, function (pred, filterable) {\n  return _isObject(filterable) ? _reduce(function (acc, key) {\n    if (pred(filterable[key])) {\n      acc[key] = filterable[key];\n    }\n\n    return acc;\n  }, {}, keys(filterable)) : // else\n  _filter(pred, filterable);\n}));\n\nexport default filter;","map":null,"metadata":{},"sourceType":"module"}