{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport curry from './curry.js';\nimport nAry from './nAry.js';\n/**\r\n * Wraps a constructor function inside a curried function that can be called\r\n * with the same arguments and returns the same type. The arity of the function\r\n * returned is specified to allow using variadic constructor functions.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.4.0\r\n * @category Function\r\n * @sig Number -> (* -> {*}) -> (* -> {*})\r\n * @param {Number} n The arity of the constructor function.\r\n * @param {Function} Fn The constructor function to wrap.\r\n * @return {Function} A wrapped, curried constructor function.\r\n * @example\r\n *\r\n *      // Variadic Constructor function\r\n *      function Salad() {\r\n *        this.ingredients = arguments;\r\n *      }\r\n *\r\n *      Salad.prototype.recipe = function() {\r\n *        const instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);\r\n *        return R.join('\\n', instructions);\r\n *      };\r\n *\r\n *      const ThreeLayerSalad = R.constructN(3, Salad);\r\n *\r\n *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.\r\n *      const salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');\r\n *\r\n *      console.log(salad.recipe());\r\n *      // Add a dollop of Mayonnaise\r\n *      // Add a dollop of Potato Chips\r\n *      // Add a dollop of Ketchup\r\n */\n\nvar constructN = /*#__PURE__*/_curry2(function constructN(n, Fn) {\n  if (n > 10) {\n    throw new Error('Constructor with greater than ten arguments');\n  }\n\n  if (n === 0) {\n    return function () {\n      return new Fn();\n    };\n  }\n\n  return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n    switch (arguments.length) {\n      case 1:\n        return new Fn($0);\n\n      case 2:\n        return new Fn($0, $1);\n\n      case 3:\n        return new Fn($0, $1, $2);\n\n      case 4:\n        return new Fn($0, $1, $2, $3);\n\n      case 5:\n        return new Fn($0, $1, $2, $3, $4);\n\n      case 6:\n        return new Fn($0, $1, $2, $3, $4, $5);\n\n      case 7:\n        return new Fn($0, $1, $2, $3, $4, $5, $6);\n\n      case 8:\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n\n      case 9:\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n\n      case 10:\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n    }\n  }));\n});\n\nexport default constructN;","map":null,"metadata":{},"sourceType":"module"}