{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport _isFunction from './internal/_isFunction.js';\nimport and from './and.js';\nimport lift from './lift.js';\n/**\r\n * A function which calls the two provided functions and returns the `&&`\r\n * of the results.\r\n * It returns the result of the first function if it is false-y and the result\r\n * of the second function otherwise. Note that this is short-circuited,\r\n * meaning that the second function will not be invoked if the first returns a\r\n * false-y value.\r\n *\r\n * In addition to functions, `R.both` also accepts any fantasy-land compatible\r\n * applicative functor.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.12.0\r\n * @category Logic\r\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\r\n * @param {Function} f A predicate\r\n * @param {Function} g Another predicate\r\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\r\n * @see R.and\r\n * @example\r\n *\r\n *      const gt10 = R.gt(R.__, 10)\r\n *      const lt20 = R.lt(R.__, 20)\r\n *      const f = R.both(gt10, lt20);\r\n *      f(15); //=> true\r\n *      f(30); //=> false\r\n *\r\n *      R.both(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(false)\r\n *      R.both([false, false, 'a'], [11]); //=> [false, false, 11]\r\n */\n\nvar both = /*#__PURE__*/_curry2(function both(f, g) {\n  return _isFunction(f) ? function _both() {\n    return f.apply(this, arguments) && g.apply(this, arguments);\n  } : lift(and)(f, g);\n});\n\nexport default both;","map":null,"metadata":{},"sourceType":"module"}