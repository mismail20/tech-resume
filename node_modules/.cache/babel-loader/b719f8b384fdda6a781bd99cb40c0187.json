{"ast":null,"code":"import _curry3 from './internal/_curry3.js';\nimport _has from './internal/_has.js';\nimport _isArray from './internal/_isArray.js';\nimport _isInteger from './internal/_isInteger.js';\nimport assoc from './assoc.js';\nimport isNil from './isNil.js';\n/**\r\n * Makes a shallow clone of an object, setting or overriding the nodes required\r\n * to create the given path, and placing the specific value at the tail end of\r\n * that path. Note that this copies and flattens prototype properties onto the\r\n * new object as well. All non-primitive properties are copied by reference.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.8.0\r\n * @category Object\r\n * @typedefn Idx = String | Int\r\n * @sig [Idx] -> a -> {a} -> {a}\r\n * @param {Array} path the path to set\r\n * @param {*} val The new value\r\n * @param {Object} obj The object to clone\r\n * @return {Object} A new object equivalent to the original except along the specified path.\r\n * @see R.dissocPath\r\n * @example\r\n *\r\n *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\r\n *\r\n *      // Any missing or non-object keys in path will be overridden\r\n *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}\r\n */\n\nvar assocPath = /*#__PURE__*/_curry3(function assocPath(path, val, obj) {\n  if (path.length === 0) {\n    return val;\n  }\n\n  var idx = path[0];\n\n  if (path.length > 1) {\n    var nextObj = !isNil(obj) && _has(idx, obj) ? obj[idx] : _isInteger(path[1]) ? [] : {};\n    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);\n  }\n\n  if (_isInteger(idx) && _isArray(obj)) {\n    var arr = [].concat(obj);\n    arr[idx] = val;\n    return arr;\n  } else {\n    return assoc(idx, val, obj);\n  }\n});\n\nexport default assocPath;","map":null,"metadata":{},"sourceType":"module"}