{"ast":null,"code":"import _arity from './internal/_arity.js';\nimport _curry1 from './internal/_curry1.js';\nimport _curry2 from './internal/_curry2.js';\nimport _curryN from './internal/_curryN.js';\n/**\r\n * Returns a curried equivalent of the provided function, with the specified\r\n * arity. The curried function has two unusual capabilities. First, its\r\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\r\n * following are equivalent:\r\n *\r\n *   - `g(1)(2)(3)`\r\n *   - `g(1)(2, 3)`\r\n *   - `g(1, 2)(3)`\r\n *   - `g(1, 2, 3)`\r\n *\r\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\r\n * \"gaps\", allowing partial application of any combination of arguments,\r\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\r\n * the following are equivalent:\r\n *\r\n *   - `g(1, 2, 3)`\r\n *   - `g(_, 2, 3)(1)`\r\n *   - `g(_, _, 3)(1)(2)`\r\n *   - `g(_, _, 3)(1, 2)`\r\n *   - `g(_, 2)(1)(3)`\r\n *   - `g(_, 2)(1, 3)`\r\n *   - `g(_, 2)(_, 3)(1)`\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.5.0\r\n * @category Function\r\n * @sig Number -> (* -> a) -> (* -> a)\r\n * @param {Number} length The arity for the returned function.\r\n * @param {Function} fn The function to curry.\r\n * @return {Function} A new, curried function.\r\n * @see R.curry\r\n * @example\r\n *\r\n *      const sumArgs = (...args) => R.sum(args);\r\n *\r\n *      const curriedAddFourNumbers = R.curryN(4, sumArgs);\r\n *      const f = curriedAddFourNumbers(1, 2);\r\n *      const g = f(3);\r\n *      g(4); //=> 10\r\n */\n\nvar curryN = /*#__PURE__*/_curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n\n  return _arity(length, _curryN(length, [], fn));\n});\n\nexport default curryN;","map":null,"metadata":{},"sourceType":"module"}