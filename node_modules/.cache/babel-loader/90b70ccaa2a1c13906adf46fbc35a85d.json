{"ast":null,"code":"import _curry3 from './internal/_curry3.js';\nimport equals from './equals.js';\nimport path from './path.js';\n/**\r\n * Determines whether a nested path on an object has a specific value, in\r\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.7.0\r\n * @category Relation\r\n * @typedefn Idx = String | Int\r\n * @sig [Idx] -> a -> {a} -> Boolean\r\n * @param {Array} path The path of the nested property to use\r\n * @param {*} val The value to compare the nested property with\r\n * @param {Object} obj The object to check the nested property in\r\n * @return {Boolean} `true` if the value equals the nested object property,\r\n *         `false` otherwise.\r\n * @example\r\n *\r\n *      const user1 = { address: { zipCode: 90210 } };\r\n *      const user2 = { address: { zipCode: 55555 } };\r\n *      const user3 = { name: 'Bob' };\r\n *      const users = [ user1, user2, user3 ];\r\n *      const isFamous = R.pathEq(['address', 'zipCode'], 90210);\r\n *      R.filter(isFamous, users); //=> [ user1 ]\r\n */\n\nvar pathEq = /*#__PURE__*/_curry3(function pathEq(_path, val, obj) {\n  return equals(path(_path, obj), val);\n});\n\nexport default pathEq;","map":null,"metadata":{},"sourceType":"module"}