{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport pipeWith from './pipeWith.js';\nimport reverse from './reverse.js';\n/**\r\n * Performs right-to-left function composition using transforming function. The rightmost function may have\r\n * any arity; the remaining functions must be unary.\r\n *\r\n * **Note:** The result of compose is not automatically curried.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @category Function\r\n * @sig ((* -> *), [(y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)]) -> ((a, b, ..., n) -> z)\r\n * @param {...Function} ...functions The functions to compose\r\n * @return {Function}\r\n * @see R.compose, R.pipeWith\r\n * @example\r\n *\r\n *      const composeWhileNotNil = R.composeWith((f, res) => R.isNil(res) ? res : f(res));\r\n *\r\n *      composeWhileNotNil([R.inc, R.prop('age')])({age: 1}) //=> 2\r\n *      composeWhileNotNil([R.inc, R.prop('age')])({}) //=> undefined\r\n *\r\n * @symb R.composeWith(f)([g, h, i])(...args) = f(g, f(h, f(i, ...args)))\r\n */\n\nvar composeWith = /*#__PURE__*/_curry2(function composeWith(xf, list) {\n  return pipeWith.apply(this, [xf, reverse(list)]);\n});\n\nexport default composeWith;","map":null,"metadata":{},"sourceType":"module"}