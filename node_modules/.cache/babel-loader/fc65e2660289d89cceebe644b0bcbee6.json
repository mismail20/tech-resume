{"ast":null,"code":"import _includesWith from './internal/_includesWith.js';\nimport _curry3 from './internal/_curry3.js';\nimport _filter from './internal/_filter.js';\n/**\r\n * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\r\n * `xs'` comprising each of the elements of `xs` which is equal to one or more\r\n * elements of `ys` according to `pred`.\r\n *\r\n * `pred` must be a binary function expecting an element from each list.\r\n *\r\n * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\r\n * not be significant, but since `xs'` is ordered the implementation guarantees\r\n * that its values are in the same order as they appear in `xs`. Duplicates are\r\n * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.24.0\r\n * @category Relation\r\n * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]\r\n * @param {Function} pred\r\n * @param {Array} xs\r\n * @param {Array} ys\r\n * @return {Array}\r\n * @see R.intersection\r\n * @example\r\n *\r\n *      R.innerJoin(\r\n *        (record, id) => record.id === id,\r\n *        [{id: 824, name: 'Richie Furay'},\r\n *         {id: 956, name: 'Dewey Martin'},\r\n *         {id: 313, name: 'Bruce Palmer'},\r\n *         {id: 456, name: 'Stephen Stills'},\r\n *         {id: 177, name: 'Neil Young'}],\r\n *        [177, 456, 999]\r\n *      );\r\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\r\n */\n\nvar innerJoin = /*#__PURE__*/_curry3(function innerJoin(pred, xs, ys) {\n  return _filter(function (x) {\n    return _includesWith(pred, x, ys);\n  }, xs);\n});\n\nexport default innerJoin;","map":null,"metadata":{},"sourceType":"module"}