{"ast":null,"code":"import _curry1 from './internal/_curry1.js';\nimport _toString from './internal/_toString.js';\n/**\r\n * Returns the string representation of the given value. `eval`'ing the output\r\n * should result in a value equivalent to the input value. Many of the built-in\r\n * `toString` methods do not satisfy this requirement.\r\n *\r\n * If the given value is an `[object Object]` with a `toString` method other\r\n * than `Object.prototype.toString`, this method is invoked with no arguments\r\n * to produce the return value. This means user-defined constructor functions\r\n * can provide a suitable `toString` method. For example:\r\n *\r\n *     function Point(x, y) {\r\n *       this.x = x;\r\n *       this.y = y;\r\n *     }\r\n *\r\n *     Point.prototype.toString = function() {\r\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\r\n *     };\r\n *\r\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.14.0\r\n * @category String\r\n * @sig * -> String\r\n * @param {*} val\r\n * @return {String}\r\n * @example\r\n *\r\n *      R.toString(42); //=> '42'\r\n *      R.toString('abc'); //=> '\"abc\"'\r\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\r\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\r\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\r\n */\n\nvar toString = /*#__PURE__*/_curry1(function toString(val) {\n  return _toString(val, []);\n});\n\nexport default toString;","map":null,"metadata":{},"sourceType":"module"}