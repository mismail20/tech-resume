{"ast":null,"code":"import _curry3 from './internal/_curry3.js';\nimport curryN from './curryN.js';\n/**\r\n * Creates a function that will process either the `onTrue` or the `onFalse`\r\n * function depending upon the result of the `condition` predicate.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.8.0\r\n * @category Logic\r\n * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\r\n * @param {Function} condition A predicate function\r\n * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\r\n * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\r\n * @return {Function} A new function that will process either the `onTrue` or the `onFalse`\r\n *                    function depending upon the result of the `condition` predicate.\r\n * @see R.unless, R.when, R.cond\r\n * @example\r\n *\r\n *      const incCount = R.ifElse(\r\n *        R.has('count'),\r\n *        R.over(R.lensProp('count'), R.inc),\r\n *        R.assoc('count', 1)\r\n *      );\r\n *      incCount({});           //=> { count: 1 }\r\n *      incCount({ count: 1 }); //=> { count: 2 }\r\n */\n\nvar ifElse = /*#__PURE__*/_curry3(function ifElse(condition, onTrue, onFalse) {\n  return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {\n    return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n  });\n});\n\nexport default ifElse;","map":null,"metadata":{},"sourceType":"module"}