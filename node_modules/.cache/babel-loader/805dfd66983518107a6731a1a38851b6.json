{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar isType = R.propEq('type');\nvar isLink = isType(P.Link);\nvar isText = isType(P.Text);\nvar isTextInstance = isType(P.TextInstance);\n/**\r\n * Checks if node has render prop\r\n *\r\n * @param {Object} node\r\n * @returns {Boolean} has render prop?\r\n */\n\nvar hasRenderProp = R.hasPath(['props', 'render']);\n/**\r\n * Checks if node is text type (Text or TextInstance)\r\n *\r\n * @param {Object} node\r\n * @returns {Boolean} are all children text instances?\r\n */\n\nvar isTextType = R.either(isText, isTextInstance);\n/**\r\n * Checks if is tet link that needs to be wrapped in Text\r\n *\r\n * @param {Object} node\r\n * @returns {Boolean} are all children text instances?\r\n */\n\nvar isTextLink = function isTextLink(node) {\n  var children = node.children || []; // Text string inside a Link\n\n  if (children.every(isTextInstance)) return true; // Text node inside a Link\n\n  if (children.every(isText)) return false;\n  return children.every(isTextType);\n};\n/**\r\n * Wraps node children inside Text node\r\n *\r\n * @param {Object} node\r\n * @returns {Boolean} node with intermediate Text child\r\n */\n\n\nvar wrapText = function wrapText(node) {\n  var textElement = {\n    type: P.Text,\n    props: {},\n    style: {},\n    box: {},\n    children: node.children\n  };\n  return R.assoc('children', [textElement], node);\n};\n\nvar transformLink = function transformLink(node) {\n  if (!isLink(node)) return node; // If has render prop substitute the instance by a Text, that will\n  // ultimately render the inline Link via the textkit PDF renderer.\n\n  if (hasRenderProp(node)) return R.assoc('type', P.Text, node); // If is a text link (either contains Text or TextInstalce), wrap it\n  // inside a Text element so styles are applied correctly\n\n  if (isTextLink(node)) return wrapText(node);\n  return node;\n};\n/**\r\n * Transforms Link layout to correctly render text and dynamic rendered links\r\n *\r\n * @param {Object} node\r\n * @returns {Object} node with link substitution\r\n */\n\n\nvar resolveLinkSubstitution = function resolveLinkSubstitution(node) {\n  var resolveChild = R.compose(transformLink, resolveLinkSubstitution);\n  return R.evolve({\n    children: R.map(resolveChild)\n  })(node);\n};\n\nvar _default = resolveLinkSubstitution;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}