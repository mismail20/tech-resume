{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport _isInteger from './internal/_isInteger.js';\nimport _isArray from './internal/_isArray.js';\nimport assoc from './assoc.js';\nimport dissoc from './dissoc.js';\nimport remove from './remove.js';\nimport update from './update.js';\n/**\r\n * Makes a shallow clone of an object, omitting the property at the given path.\r\n * Note that this copies and flattens prototype properties onto the new object\r\n * as well. All non-primitive properties are copied by reference.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.11.0\r\n * @category Object\r\n * @typedefn Idx = String | Int\r\n * @sig [Idx] -> {k: v} -> {k: v}\r\n * @param {Array} path The path to the value to omit\r\n * @param {Object} obj The object to clone\r\n * @return {Object} A new object without the property at path\r\n * @see R.assocPath\r\n * @example\r\n *\r\n *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\r\n */\n\nvar dissocPath = /*#__PURE__*/_curry2(function dissocPath(path, obj) {\n  switch (path.length) {\n    case 0:\n      return obj;\n\n    case 1:\n      return _isInteger(path[0]) && _isArray(obj) ? remove(path[0], 1, obj) : dissoc(path[0], obj);\n\n    default:\n      var head = path[0];\n      var tail = Array.prototype.slice.call(path, 1);\n\n      if (obj[head] == null) {\n        return obj;\n      } else if (_isInteger(head) && _isArray(obj)) {\n        return update(head, dissocPath(tail, obj[head]), obj);\n      } else {\n        return assoc(head, dissocPath(tail, obj[head]), obj);\n      }\n\n  }\n});\n\nexport default dissocPath;","map":null,"metadata":{},"sourceType":"module"}